{"ast":null,"code":"var _jsxFileName = \"C:\\\\REACT\\\\unsung\\\\src\\\\Payment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Payment.css\";\nimport Product from \"./Product\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { useStateValue } from \"./StateProvider\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { getBasketTotal } from \"./reducer\";\nimport axios from \"./axios\";\nimport CurrencyFormat from \"react-currency-format\";\nimport { db } from \"./firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Payment() {\n  _s();\n\n  const [{\n    basket,\n    user\n  }, dispatch] = useStateValue();\n  const history = useHistory();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [succeeded, setSucceeded] = useState(false);\n  const [processing, setProcessing] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState(true);\n  useEffect(() => {\n    //generate the special stripe secret which allows us to charge a customer\n    const getClientSecret = async () => {\n      const response = await axios({\n        method: 'post',\n        //Stripe expects total in a currencies subunits\n        url: `/payments/create?total=${getBasketTotal(basket) * 100}`\n      });\n      setClientSecret(response.data.clientSecret);\n    };\n\n    getClientSecret();\n  }, [basket]);\n\n  const handleSubmit = async event => {\n    // do all fancy stripe stuff\n    event.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    }).then(_ref => {\n      let {\n        paymentIntent\n      } = _ref;\n      //paymentIntent = payment confirmation\n      db.collection('users').doc(user === null || user === void 0 ? void 0 : user.uid).collection('Orders').doc(paymentIntent.id).set({\n        basket: basket,\n        amount: paymentIntent.amount,\n        created: paymentIntent.created\n      });\n      setSucceeded(true);\n      setError(null);\n      setProcessing(false);\n      dispatch({\n        type: 'EMPTY_BASKET'\n      });\n      history.replace('/orders');\n    });\n  };\n\n  const handleChange = event => {\n    // Listen for changes in cardElement\n    // and display any error as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"payment__section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__title\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Payment Method\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"payment__details\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(CardElement, {\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"payment__priceContainer\",\n            children: [/*#__PURE__*/_jsxDEV(CurrencyFormat, {\n              renderText: value => /*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Order Total: \", value]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 42\n              }, this),\n              decimalScale: 2,\n              value: getBasketTotal(basket),\n              displayType: \"text\",\n              thousandSeparation: true,\n              prefix: \"$\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: processing || disabled || succeeded,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: processing ? /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Processing\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 40\n                }, this) : \"Buy Now\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 22\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Payment, \"wwvkYTX8kXeAM+bDqmI5HXwQxYE=\", false, function () {\n  return [useStateValue, useHistory, useStripe, useElements];\n});\n\n_c = Payment;\nexport default Payment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"sources":["C:/REACT/unsung/src/Payment.js"],"names":["React","useEffect","useState","Product","CardElement","useStripe","useElements","useStateValue","Link","useHistory","getBasketTotal","axios","CurrencyFormat","db","Payment","basket","user","dispatch","history","stripe","elements","succeeded","setSucceeded","processing","setProcessing","error","setError","disabled","setDisabled","clientSecret","setClientSecret","getClientSecret","response","method","url","data","handleSubmit","event","preventDefault","payload","confirmCardPayment","payment_method","card","getElement","then","paymentIntent","collection","doc","uid","id","set","amount","created","type","replace","handleChange","empty","message","value"],"mappings":"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","sourcesContent":["import React,{useEffect, useState,} from \"react\";\r\nimport \"./Payment.css\";\r\nimport Product from \"./Product\";\r\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { getBasketTotal } from \"./reducer\";\r\nimport axios from \"./axios\";\r\nimport CurrencyFormat from \"react-currency-format\";\r\nimport { db } from \"./firebase\";\r\nfunction Payment() {\r\n    const [{ basket, user }, dispatch] = useStateValue();\r\n    const history = useHistory();\r\n  \r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n  \r\n    const [succeeded, setSucceeded] = useState(false);\r\n    const [processing, setProcessing] = useState(\"\");\r\n    const [error, setError] = useState(null);\r\n    const [disabled, setDisabled] = useState(true);\r\n    const [clientSecret, setClientSecret] = useState(true);\r\n\r\n  useEffect(() =>{\r\n    //generate the special stripe secret which allows us to charge a customer\r\n    const getClientSecret = async() =>{\r\n        const response = await axios({\r\n            method:'post',\r\n            //Stripe expects total in a currencies subunits\r\n            url: `/payments/create?total=${getBasketTotal(basket) * 100 }`\r\n        });\r\n        setClientSecret(response.data.clientSecret)\r\n    }\r\n\r\n    getClientSecret();\r\n  },[basket])\r\n\r\n  \r\n  const handleSubmit = async(event) => {\r\n    // do all fancy stripe stuff\r\n       event.preventDefault();\r\n       setProcessing(true); \r\n\r\n       const payload = await stripe.confirmCardPayment(clientSecret, {\r\n           payment_method:{\r\n               card: elements.getElement(CardElement)\r\n           }\r\n       }).then(({paymentIntent}) =>{\r\n           //paymentIntent = payment confirmation\r\n\r\n           db.collection('users')\r\n           .doc(user?.uid)\r\n           .collection('Orders')\r\n           .doc(paymentIntent.id)\r\n           .set({\r\n               basket: basket,\r\n               amount: paymentIntent.amount,\r\n               created: paymentIntent.created\r\n           })\r\n\r\n           setSucceeded(true);\r\n           setError(null)\r\n           setProcessing(false)\r\n\r\n           dispatch({\r\n               type: 'EMPTY_BASKET'\r\n           })\r\n        \r\n           history.replace('/orders')\r\n       })\r\n  };\r\n  const handleChange = (event) => {\r\n    // Listen for changes in cardElement\r\n    // and display any error as the customer types their card details\r\n    setDisabled(event.empty);\r\n    setError(event.error ? event.error.message : \"\");\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"payment\">\r\n\r\n        {/*Payment section - payment method */}\r\n        <div className=\"payment__section\">\r\n          <div className=\"payment__title\">\r\n            <h2>Payment Method</h2>\r\n          </div>\r\n          <div className=\"payment__details\">\r\n            <form onSubmit={handleSubmit}>\r\n              <CardElement onChange={handleChange} />\r\n              <div className=\"payment__priceContainer\">\r\n                <CurrencyFormat\r\n                  renderText={(value) => <h3>Order Total: {value}</h3>}\r\n                  decimalScale={2}\r\n                  value={getBasketTotal(basket)}\r\n                  displayType={\"text\"}\r\n                  thousandSeparation={true}\r\n                  prefix={\"$\"}\r\n                />\r\n                <button disabled={processing || disabled || succeeded}>\r\n                    <span>{processing? <p>Processing</p> : \"Buy Now\"}\r\n                    </span>\r\n                </button>\r\n              </div>\r\n              {/*Errors */}\r\n           {error && <div>{error}</div>}\r\n            </form> \r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Payment;\r\n"]},"metadata":{},"sourceType":"module"}